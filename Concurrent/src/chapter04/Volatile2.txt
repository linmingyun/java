    在《Java并发编程学习笔记之五：volatile变量修饰符—意料之外的问题》一文中遗留了一个问题，就是volatile只修饰了missedIt变量，而没修饰value变量，但是在线程读取value的值的时候，也读到的是最新的数据。但是在网上查了很多资料都无果，看来很多人对volatile的规则并不是太清晰，或者说只停留在很表面的层次，一知半解。
    这两天看《深入Java虚拟机——JVM高级特性与最佳实践》第12章：Java内存模型与线程，并在网上查阅了Java内存模型相关资料，学到了不少东西，尤其在看这篇文章的volatile部分的讲解之后，算是确定了问题出现的原因。
    首先明确一点：假如有两个线程分别读写volatile变量时，线程A写入了某volatile变量，线程B在读取该volatile变量时，便能看到线程A对该volatile变量的写入操作，关键在这里，它不仅会看到对该volatile变量的写入操作，A线程在写volatile变量之前所有可见的共享变量，在B线程读同一个volatile变量后，都将立即变得对B线程可见。
   回过头来看文章中出现的问题，由于程序中volatile变量missedIt的写入操作在value变量写入操作之后，而且根据volatile规则，又不能重排序，因此，在线程B读取由线程A改变后的missedIt之后，它之前的value变量在线程A的改变也对线程B变得可见了。
     我们颠倒一下value=50和missedIt=true这两行代码试下，即missedIt=true在前，value=50在后，这样便会得到我们想要的结果：value值的改变不会被看到。
    这应该是JDK1.2之后对volatile规则做了一些修订的结果。

   很明显，这其实并不符合使用volatile的第二个条件：该变量要没有包含在具有其他变量的不变式中。因此，在这里使用volatile是不安全的。